// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsInfoClient is the client API for GoodsInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsInfoClient interface {
	//一个添加商品
	AddGoods(ctx context.Context, in *Goods, opts ...grpc.CallOption) (*GoodsId, error)
	//一个获取商品
	GetGoods(ctx context.Context, in *GoodsId, opts ...grpc.CallOption) (*Goods, error)
}

type goodsInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsInfoClient(cc grpc.ClientConnInterface) GoodsInfoClient {
	return &goodsInfoClient{cc}
}

func (c *goodsInfoClient) AddGoods(ctx context.Context, in *Goods, opts ...grpc.CallOption) (*GoodsId, error) {
	out := new(GoodsId)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfo/addGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoClient) GetGoods(ctx context.Context, in *GoodsId, opts ...grpc.CallOption) (*Goods, error) {
	out := new(Goods)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfo/getGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsInfoServer is the server API for GoodsInfo service.
// All implementations must embed UnimplementedGoodsInfoServer
// for forward compatibility
type GoodsInfoServer interface {
	//一个添加商品
	AddGoods(context.Context, *Goods) (*GoodsId, error)
	//一个获取商品
	GetGoods(context.Context, *GoodsId) (*Goods, error)
	mustEmbedUnimplementedGoodsInfoServer()
}

// UnimplementedGoodsInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsInfoServer struct {
}

func (UnimplementedGoodsInfoServer) AddGoods(context.Context, *Goods) (*GoodsId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoods not implemented")
}
func (UnimplementedGoodsInfoServer) GetGoods(context.Context, *GoodsId) (*Goods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedGoodsInfoServer) mustEmbedUnimplementedGoodsInfoServer() {}

// UnsafeGoodsInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsInfoServer will
// result in compilation errors.
type UnsafeGoodsInfoServer interface {
	mustEmbedUnimplementedGoodsInfoServer()
}

func RegisterGoodsInfoServer(s grpc.ServiceRegistrar, srv GoodsInfoServer) {
	s.RegisterService(&GoodsInfo_ServiceDesc, srv)
}

func _GoodsInfo_AddGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Goods)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).AddGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfo/addGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).AddGoods(ctx, req.(*Goods))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfo_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfo/getGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoServer).GetGoods(ctx, req.(*GoodsId))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsInfo_ServiceDesc is the grpc.ServiceDesc for GoodsInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.GoodsInfo",
	HandlerType: (*GoodsInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addGoods",
			Handler:    _GoodsInfo_AddGoods_Handler,
		},
		{
			MethodName: "getGoods",
			Handler:    _GoodsInfo_GetGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
